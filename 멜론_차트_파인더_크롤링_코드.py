# -*- coding: utf-8 -*-
"""멜론 차트 파인더 크롤링 코드

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZptON9LpY-flMUAxb9q_i5rfSg3hFR-2
"""

!pip install selenium
!apt-get update
!apt install chromium-chromedriver

from selenium import webdriver
from bs4 import BeautifulSoup
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from urllib.request import urlopen
from urllib.parse import quote_plus

from pprint import pprint
from tqdm import tqdm
import time
import pandas as pd
import sys

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
driver = webdriver.Chrome('chromedriver', options=chrome_options)

"""# 함수 설정"""

# 연대 선택 (2020년대: 1, 2010년대: 2)
def select_era(era):
    driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/div/div[1]/div[1]/ul/li['+str(era)+']/span/label').click()
    time.sleep(1)

# 연도 선택 (2022년: 1, 2021년: 2, 2020년: 3)
def select_year(year):
    driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/div/div[2]/div[1]/ul/li['+str(year)+']/span/label').click()
    time.sleep(1)

# 월 선택 (1월 ~ 12월, 1 ~ 12)
def select_month(month):
    driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/div/div[3]/div[1]/ul/li['+str(month)+']/span/label').click()
    time.sleep(1)

# 장르 선택 (종합: 1, 발라드: 4, 댄스: 5, 랩/힙합: 6, R&B/소울: 7)
def select_genre(genre):
    driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/div/div[5]/div[1]/ul/li['+str(genre)+']/span/label').click()
    time.sleep(1)

# 차트 파인더 설정 완료 후 검색 버튼
def search_button():
    driver.find_element(By.XPATH, '//*[@id="d_srch_form"]/div[2]/button/span/span').click()
    time.sleep(1)

# 차트 페이지 도출 함수
def select_page(era, year, month, genre):
    select_era(era)
    select_year(year)
    select_month(month)
    select_genre(genre)
    search_button()

# 월간 차트 크롤링 함수 // 태그, 클래스가 조금 이상하게 설정되어 있는데 일단... 잘 굴러감
def melon_crawling():
    title = driver.find_elements(By.CLASS_NAME, 'ellipsis.rank01')
    artist = driver.find_elements(By.CLASS_NAME, 'ellipsis.rank02')
    album = driver.find_elements(By.CLASS_NAME, 'ellipsis.rank03')

    title_tmp_list = artist_tmp_list = album_tmp_list = []

    for x in title:
        title_tmp_list.append(x.text)

    for y in artist:
        artist_tmp_list.append(y.text)
    
    for z in album:
        album_tmp_list.append(z.text)
        
    return title_tmp_list, artist_tmp_list, album_tmp_list

"""# 연대, 연도, 월, 장르 선택할 수 있는 기본 크롤링 코드


"""

# 홈페이지 접속
driver.get('https://www.melon.com/chart/index.htm') 
time.sleep(1)

# 차트파인더 클릭
driver.find_element(By.XPATH, '//*[@id="gnb_menu"]/ul[1]/li[1]/div/div/button/span').click() 
time.sleep(1)

# 월간차트 클릭
driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/h4[2]/a').click()
time.sleep(1)

# 2020년대 / 2022년 / 4월 / 장르종합 월간 차트를 구하기 위한 페이지 설정
select_page(1, 1, 4, 5)

# 1-50위 차트 크롤링
title_tmp_list, artist_tmp_list, album_tmp_list = melon_crawling()

title_list = title_tmp_list[:50]
artist_list = artist_tmp_list[100:150]
album_list = album_tmp_list[200:250]

# 페이지 넘기는 버튼 클릭
driver.find_element(By.XPATH, '//*[@id="frm"]/div[2]/span/a').click() 
time.sleep(1)

# 51-100위 차트 크롤링
title_tmp_list, artist_tmp_list, album_tmp_list = melon_crawling()

title_list += title_tmp_list[50:100]
artist_list += artist_tmp_list[150:200]
album_list += album_tmp_list[250:300]

title_list

"""## 2020 ~ 2022 월간 차트 크롤링 코드 (반복문, 딕셔너리)

"""

# 홈페이지 접속
driver.get('https://www.melon.com/chart/index.htm') 
time.sleep(1)

# 차트파인더 클릭
driver.find_element(By.XPATH, '//*[@id="gnb_menu"]/ul[1]/li[1]/div/div/button/span').click() 
time.sleep(1)

# 월간차트 클릭
driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/h4[2]/a').click()
time.sleep(1)

year_chart_dic = {}

year_category = ['2022','2021','2020']
month_category = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
genre_category = ['Total','Korea','Global','Ballad','Dance','Rap/Hiphop','R&B/Soul']

# 2022, 2021, 2020년 자료를 크롤링 하기 위한 반복문 설정 (1, 2, 3)
for y in tqdm(range(1,4), desc = '연도'):
    time.sleep(0.1)
    genre_chart_dic = {}

# 장르별로 차트를 크롤링 하기 위한 반복문 설정 (발라드 - 4 / 댄스 - 5 / 랩,힙합 - 6 / 알앤비,소울 - 7)
    for g in tqdm(range(4,8), desc = '장르'):
        time.sleep(0.1)
        year = []
        month = []
        genre = []
        rank = []
        title = []
        artist = []
        album = []

# 월별로 차트를 크롤링 하기 위한 반복문 설정 (1월 ~ 12월)
        for m in tqdm(range(1,13), desc='월'):
            time.sleep(0.1)
            # 2022년 6월 ~ 12월은 continue
            if y==1 and m>=6:
                continue

            select_page(1, y, m, g)

            # 1-50위 차트 크롤링
            title_tmp_list, artist_tmp_list, album_tmp_list = melon_crawling()

            title_list = title_tmp_list[:50]
            artist_list = artist_tmp_list[100:150]
            album_list = album_tmp_list[200:250]

            # 페이지 넘기는 버튼 클릭
            driver.find_element(By.XPATH, '//*[@id="frm"]/div[2]/span/a').click() 
            time.sleep(1)

            # 51-100위 차트 크롤링
            title_tmp_list, artist_tmp_list, album_tmp_list = melon_crawling()

            title_list += title_tmp_list[50:100]
            artist_list += artist_tmp_list[150:200]
            album_list += album_tmp_list[250:300]
            
            year_list = []
            month_list = []
            genre_list = []
            rank_list = []

            # 연도별 리스트 생성
            if y == 1:
                for _ in range(100):
                    year_list.append(year_category[y-1])
            elif y == 2:
                for _ in range(100):
                    year_list.append(year_category[y-1])
            elif y == 3:
                for _ in range(100):
                    year_list.append(year_category[y-1])

            for _ in range(100):
                month_list.append(month_category[m-1])
            
            # 장르별 리스트 생성
            if g == 4:
                for _ in range(100):
                    genre_list.append(genre_category[g-1])
            elif g == 5:
                for _ in range(100):
                    genre_list.append(genre_category[g-1])
            elif g == 6:
                for _ in range(100):
                    genre_list.append(genre_category[g-1])
            elif g == 7:
                for _ in range(100):
                    genre_list.append(genre_category[g-1])

            for n in range(1,101):
                rank_list.append(n)

            year += year_list
            month += month_list
            genre += genre_list
            rank += rank_list
            title += title_list
            artist += artist_list
            album += album_list
        
        chart_dic = {}

        chart_dic['Year'] = year
        chart_dic['Month'] = month
        chart_dic['Genre'] = genre
        chart_dic['Rank'] = rank
        chart_dic['Title'] = title
        chart_dic['Artist'] = artist
        chart_dic['Album'] = album
        
        genre_chart_dic[genre_category[g-1]] = chart_dic
        #발라드 / 댄스 / 랩,힙합 / 알앤비,소울
    
    year_chart_dic[year_category[y-1]] = genre_chart_dic
    #2022년 / 2021년 / 2020년

y20b = pd.DataFrame(year_chart_dic['2020']['Ballad'])
y20d = pd.DataFrame(year_chart_dic['2020']['Dance'])
y20h = pd.DataFrame(year_chart_dic['2020']['Rap/Hiphop'])
y20r = pd.DataFrame(year_chart_dic['2020']['R&B/Soul'])
y21b = pd.DataFrame(year_chart_dic['2021']['Ballad'])
y21d = pd.DataFrame(year_chart_dic['2021']['Dance'])
y21h = pd.DataFrame(year_chart_dic['2021']['Rap/Hiphop'])
y21r = pd.DataFrame(year_chart_dic['2021']['R&B/Soul'])
y22b = pd.DataFrame(year_chart_dic['2022']['Ballad'])
y22d = pd.DataFrame(year_chart_dic['2022']['Dance'])
y22h = pd.DataFrame(year_chart_dic['2022']['Rap/Hiphop'])
y22r = pd.DataFrame(year_chart_dic['2022']['R&B/Soul'])

y20b.to_excel('y20b.xlsx')
y20d.to_excel('y20d.xlsx')
y20h.to_excel('y20h.xlsx')
y20r.to_excel('y20r.xlsx')
y21b.to_excel('y21b.xlsx')
y21d.to_excel('y21d.xlsx')
y21h.to_excel('y21h.xlsx')
y21r.to_excel('y21r.xlsx')
y22b.to_excel('y22b.xlsx')
y22d.to_excel('y22d.xlsx')
y22h.to_excel('y22h.xlsx')
y22r.to_excel('y22r.xlsx')