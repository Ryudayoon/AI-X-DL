# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlotWbNQZOMVjdOO1d4UW8erNkJof70I
"""

!pip install selenium
!apt-get update
!apt install chromium-chromedriver
!pip install fsspec
! pip install -U yt-dlp

from selenium import webdriver
from bs4 import BeautifulSoup
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from urllib.request import urlopen
from urllib.parse import quote_plus

import os
import pandas as pd
import pprint
import time
import sys
import librosa
import soundfile as sf
import numpy as np

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')
driver = webdriver.Chrome('chromedriver', options=chrome_options)

y20b=pd.read_excel('/content/drive/MyDrive/music_data/y20b.xlsx', index_col=0)
y20d=pd.read_excel('/content/drive/MyDrive/music_data/y20d.xlsx', index_col=0)
y20h=pd.read_excel('/content/drive/MyDrive/music_data/y20h.xlsx', index_col=0)
y20r=pd.read_excel('/content/drive/MyDrive/music_data/y20r.xlsx', index_col=0)
y21b=pd.read_excel('/content/drive/MyDrive/music_data/y21b.xlsx', index_col=0)
y21d=pd.read_excel('/content/drive/MyDrive/music_data/y21d.xlsx', index_col=0)
y21h=pd.read_excel('/content/drive/MyDrive/music_data/y21h.xlsx', index_col=0)
y21r=pd.read_excel('/content/drive/MyDrive/music_data/y21r.xlsx', index_col=0)
y22b=pd.read_excel('/content/drive/MyDrive/music_data/y22b.xlsx', index_col=0)
y22d=pd.read_excel('/content/drive/MyDrive/music_data/y22d.xlsx', index_col=0)
y22h=pd.read_excel('/content/drive/MyDrive/music_data/y22h.xlsx', index_col=0)
y22r=pd.read_excel('/content/drive/MyDrive/music_data/y22r.xlsx', index_col=0)

b=pd.concat([y20b,y21b,y22b],axis=0)
b=(b['Artist']+'-'+b['Title']).unique().tolist()
d=pd.concat([y20d,y21d,y22d],axis=0)
d=(d['Artist']+'-'+d['Title']).unique().tolist()
h=pd.concat([y20h,y21h,y22h],axis=0)
h=(h['Artist']+'-'+h['Title']).unique().tolist()
r=pd.concat([y20r,y21r,y22r],axis=0)
r=(r['Artist']+'-'+r['Title']).unique().tolist()

class urlfinder:
  def __init__(self,genre,li):
    self.df=pd.DataFrame()
    self.genre=genre
    self.li=li
  def finding(self):
    for l in self.li:
      # 검색 키워드 설정: 키워드 내 띄어쓰기는 URL에서 '+'로 표시되기 때문에 이에 맞게 변환
      SEARCH_KEYWORD = l.replace(' ', '+')+'+lyrics'
      URL = "https://www.youtube.com/results?search_query=" + SEARCH_KEYWORD
      driver.get(URL)
      # 웹 페이지 로딩 대기
      time.sleep(1)
      # 스크롤 함수 실행
      driver.execute_script("window.scrollTo(0, 1);")
      html_source = driver.page_source
      soup_source = BeautifulSoup(html_source, 'html.parser')
      content_total = soup_source.find_all(class_ = 'yt-simple-endpoint style-scope ytd-video-renderer')
      # 콘텐츠 제목만 추출
      content_total_title = list(map(lambda data: data.get_text().replace("\n", ""), content_total))
      # 콘텐츠 링크만 추출
      content_total_link = list(map(lambda data: "https://youtube.com" + data["href"], content_total))
      content_total_dict = {'title' : content_total_title, 'link': content_total_link}
      k = pd.DataFrame(content_total_dict)
      k = k.head(1)
      self.df = pd.concat([self.df,k])

    self.df.to_csv('./'+str(self.genre)+'.csv')

ba=urlfinder('ballad',b)

ba.finding()

ba=urlfinder('ballad',b)
ba.finding()
hi=urlfinder('hiphop',h)
hi.finding()
rb=urlfinder('rnb',r)
rb.finding()
da=urlfinder('dance',d)
da.finding()

#유튜브 wav로 다운로드
def download(url):
    """
    download wav file from `url` as `fname`
    """
    os.system(f"yt-dlp -P ./ -x --audio-format wav {url}")

def download_by_genre(genre):
  g=pd.read_csv('/content/drive/MyDrive/music_data/'+genre+'.csv',index_col=0)
  for i in range(len(g)):
    download(g.iloc[i,1])

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd

# %cd '/content/drive/MyDrive/music_data/ballad'
download_by_genre('ballad')

# %cd '/content/drive/MyDrive/music_data/dance'
download_by_genre('dance')

# %cd '/content/drive/MyDrive/music_data/hiphop'
download_by_genre('hiphop')

# %cd '/content/drive/MyDrive/music_data/rnb'
download_by_genre('rnb')

def trim_audio_data(audio_file):
    sec = 30

    y, sr = librosa.load(audio_file)

    ny = y[:sr*sec]

    sf.write(audio_file, ny, sr, format='WAV', endian='LITTLE', subtype='PCM_16')

path = '/content/drive/MyDrive/music_data/rnb'

audio_list = os.listdir(path)

for audio_name in audio_list:
    if audio_name.find('wav') is not -1:
        audio_file = path + '/' + audio_name
        trim_audio_data(audio_file)

def inpath(genre):
  path = '/content/drive/MyDrive/music_data/'+genre

  audio_list = os.listdir(path)

  for audio_name in audio_list:
    if audio_name.find('wav') is not -1:
        audio_file = path + '/' + audio_name
        trim_audio_data(audio_file)

inpath('dance')
inpath('ballad')
inpath('hiphop')
inpath('rnb')