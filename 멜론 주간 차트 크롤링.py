# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_bMjCesJx2uGr55sU13z5dR_w60ZQHDN

## 주간 차트 크롤링
"""

# 홈페이지 접속
driver.get('https://www.melon.com/chart/index.htm') 
time.sleep(1)

# 차트파인더 클릭
driver.find_element(By.XPATH, '//*[@id="gnb_menu"]/ul[1]/li[1]/div/div/button/span').click() 
time.sleep(1)

# 주간차트 클릭
driver.find_element(By.XPATH, '//*[@id="d_chart_search"]/div/h4[1]/a').click()
time.sleep(1)

year_chart_dic = {}

year_category2 = ['2022','2021','2020']
month_category = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
genre_category = ['Total','Korea','Global','Ballad','Dance','Rap/Hiphop','R&B/Soul']

# 2022, 2021, 2020년 자료를 크롤링 하기 위한 반복문 설정 (1, 2, 3)
for y in tqdm(range(2,4), desc = '연도'):
    time.sleep(0.1)
    genre_chart_dic = {}

# 장르별로 차트를 크롤링 하기 위한 반복문 설정 (발라드 - 4 / 댄스 - 5 / 랩,힙합 - 6 / 알앤비,소울 - 7)
    for g in tqdm(range(5, 6), desc = '장르'):
        time.sleep(0.1)
        year = []
        month = []
        genre = []
        rank = []
        title = []
        artist = []
        album = []
        albumId = []

# 월별로 차트를 크롤링 하기 위한 반복문 설정 (1월 ~ 12월)
        for m in tqdm(range(12,13), desc='월'):
            time.sleep(0.1)
            # 2022년 6월 ~ 12월은 continue
            #if y==1 and m>=6:
            #    continue
            
            for w in tqdm(range(1,5), desc = '주'):
                time.sleep(0.1)
                select_page2(1, y, m, w, g) #2020년대

                # 1-50위 차트 크롤링
                title_tmp_list, artist_tmp_list, album_tmp_list, album_id_tmp_list = melon_crawling1()

                title_list = title_tmp_list[:50]
                artist_list = artist_tmp_list[100:150]
                album_list = album_tmp_list[200:250]
                album_id_list = album_id_tmp_list

                # 페이지 넘기는 버튼 클릭
                driver.find_element(By.XPATH, '//*[@id="frm"]/div[2]/span/a').click() 
                time.sleep(1)

                # 51-100위 차트 크롤링
                title_tmp_list, artist_tmp_list, album_tmp_list, album_id_tmp_list = melon_crawling2()

                title_list += title_tmp_list[50:100]
                artist_list += artist_tmp_list[150:200]
                album_list += album_tmp_list[250:300]
                album_id_list += album_id_tmp_list
                
                year_list = []
                month_list = []
                genre_list = []
                rank_list = []

                # 연도별 리스트 생성
                if y == 1:
                    for _ in range(100):
                        year_list.append(year_category2[y-1])
                elif y == 2:
                    for _ in range(100):
                        year_list.append(year_category2[y-1])
                elif y == 3:
                    for _ in range(100):
                        year_list.append(year_category2[y-1])
                
                for _ in range(100):
                    month_list.append(month_category[m-1])
                
                # 장르별 리스트 생성
                if g == 4:
                    for _ in range(100):
                        genre_list.append(genre_category[g-1])
                elif g == 5:
                    for _ in range(100):
                        genre_list.append(genre_category[g-1])
                elif g == 6:
                    for _ in range(100):
                        genre_list.append(genre_category[g-1])
                elif g == 7:
                    for _ in range(100):
                        genre_list.append(genre_category[g-1])

                for n in range(1,101):
                    rank_list.append(n)

                year += year_list
                month += month_list
                genre += genre_list
                rank += rank_list
                title += title_list
                artist += artist_list
                album += album_list
                albumId += album_id_list

        chart_dic = {}

        chart_dic['Year'] = year
        chart_dic['Month'] = month
        chart_dic['Genre'] = genre
        chart_dic['Rank'] = rank
        chart_dic['Title'] = title
        chart_dic['Artist'] = artist
        chart_dic['Album'] = album
        chart_dic['Album ID'] = albumId
        
        genre_chart_dic[genre_category[g-1]] = chart_dic
        #발라드 / 댄스 / 랩,힙합 / 알앤비,소울
    
    year_chart_dic[year_category2[y-1]] = genre_chart_dic
    #2022년 / 2021년 / 2020년

"""## 트랙 번호 크롤링"""

import pandas as pd

# 중복을 제거한 댄스 월간 차트 데이터 불러오기
dance_chart = pd.read_excel('/content/댄스 주간 차트 신규.xlsx')

song_list = dance_chart['Title']
id_list = dance_chart['Album ID']

# 트랙 번호 추출 (일반적인 경우)
track_num_list = []
for song, id in zip(tqdm(song_list, desc = '곡'), id_list):
    number = 1
    driver.get('https://www.melon.com/album/detail.htm?albumId=' + str(id))
    time.sleep(0.8)
    track_dict = {}
    while True:
        try:
            album_title = driver.find_elements(By.CSS_SELECTOR, '#frm > div > table > tbody > tr:nth-child('+str(number)+') > td:nth-child(4) > div > div > div:nth-child(1)')
            track_dict[album_title[0].text] = number
            number += 1
        except:
            break

    track_num_list.append(track_dict.get(song))

import pandas as pd

# 중복을 제거한 댄스 월간 차트 데이터 불러오기
dance_chart = pd.read_excel('/content/댄스 주간 차트 신규 누락.xlsx')

song_list = dance_chart['Title']
id_list = dance_chart['Album ID']

# 트랙 번호 추출 (CD가 구분되어 있을 경우 - CD1)
track_num_list = []
for song, id in zip(tqdm(song_list, desc = '곡'), id_list):
    driver.get('https://www.melon.com/album/detail.htm?albumId=' + str(id))
    time.sleep(0.5)
    track_dict = {}
    number = 2
    while True:
        try:
            album_title = driver.find_elements(By.CSS_SELECTOR, '#frm > div > table > tbody > tr:nth-child('+str(number)+') > td:nth-child(4) > div > div > div:nth-child(1)')
            track_dict[album_title[0].text] = number-1
            number += 1
        except:
            break           

    track_num_list.append(track_dict.get(song))

track_num_list

track_dict_excel = {}
track_dict_excel['track_num'] = track_num_list
track_dict_excel = pd.DataFrame(track_dict_excel)
track_dict_excel.to_excel('주간 트랙 번호 누락.xlsx')

"""## 앨범 정보 가져오기"""

from typing_extensions import ParamSpecArgs
dance_chart = pd.read_excel('/content/댄스 주간 차트 신규.xlsx')

id_list = dance_chart['Album ID']
track_num_list = dance_chart['Track Num']

description_list = []
for id, num in zip(tqdm(id_list, desc = '곡'), track_num_list):
    driver.get('https://www.melon.com/album/detail.htm?albumId=' + str(id))
    time.sleep(1)
    descriptions = driver.find_elements(By.CSS_SELECTOR, '#d_video_summary > div')
    time.sleep(0.5)
    if not descriptions:
        description_list.append('앨범 소개 없음')
    else:
        try:
            driver.find_element(By.XPATH, '//*[@id="conts"]/div[4]/div[2]/button/span').click()
            time.sleep(0.5)
        except:
            pass
    
        descriptions = driver.find_elements(By.CSS_SELECTOR, '#d_video_summary > div')
        description = descriptions[0].text

        start_index = description.find(str(num) + '.')
        next_index = description.find(str(num+1) + '.')
        before_index = description.find(str(num-1) + '.')

        if start_index != -1:
            if next_index != -1:
                description_list.append(description[start_index:next_index])
            elif before_index != -1: #마지막 트랙인 경우
                description_list.append(description[start_index:])
            else: #싱글앨범인 경우
                album_types = driver.find_elements(By.CSS_SELECTOR, '#conts > div.section_info > div > div.entry > div.info > span')
                album_type = album_types[0].text
                if album_type in "싱글":
                    description_list.append(description[start_index:next_index])
                else:
                    description_list.append('체크 필요')

        else:
            start_index = description.find('0' + str(num)) 
            next_index = description.find('0' + str(num+1)) #-1
            before_index = description.find('0' + str(num-1)) #-1
            if start_index != -1:
                if next_index != -1:
                    description_list.append(description[start_index:next_index])
                elif before_index != -1:
                    description_list.append(description[start_index:])
                else:
                    album_types = driver.find_elements(By.CSS_SELECTOR, '#conts > div.section_info > div > div.entry > div.info > span')
                    album_type = album_types[0].text
                    if album_type in "싱글":
                        description_list.append(description[start_index:])
                    else:
                        description_list.append('체크 필요')
            else:
                description_list.append('체크 필요')

description_list

description_dict_excel = {}
description_dict_excel['Description'] = description_list
description_dict_excel = pd.DataFrame(description_dict_excel)
description_dict_excel.to_excel('앨범 소개 신규.xlsx')

"""## 텍스트 빈도 분석"""

!pip install konlpy
#!pip install googletrans==4.0.0-rc1

from konlpy.tag import Okt
from collections import Counter
#from googletrans import Translator
import re

f = open('/content/앨범 소개 최종.txt', 'r', encoding='cp949')
description = f.read()
f.close()

description = description.replace("\n","")
description = re.sub('[-=+,#/\?:^$.@*\"※~&%ㆍ·!』\\‘’|\(\)\[\]\<\>`\'…》]', '', description)

okt = Okt()
pos = okt.pos(description)

ko_en_merge = []
for tup in pos:
    text_element = tup[0]
    text_pos = tup[1]
    if text_pos == 'Noun':
        new_tup = (tup[0], 'Noun')
    elif text_pos == 'Alpha':
        new_tup = (tup[0], 'Noun')
    else:
        new_tup = ()
    ko_en_merge.append(new_tup)

count = Counter(ko_en_merge)

count.most_common(1000)